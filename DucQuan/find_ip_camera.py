import socket
import threading
import json
from concurrent.futures import ThreadPoolExecutor
from itertools import product
import tkinter as tk
from get_rtsp import Camera

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ch·ª©a th√¥ng tin ƒëƒÉng nh·∫≠p v·ªÅ CSDL
json_filename = ".camera_app/ip_camera/storage_ip.json"

MY_HOSTNAME = socket.gethostname() # T√™n laptop
MY_IP_ADDR = socket.gethostbyname(MY_HOSTNAME) # ƒê·ªãa ch·ªâ IPV4

# V√≠ d·ª• ip l√† 169.254.184.0 th√¨ s·∫Ω lo·∫°i 1 ƒë·ªãa ch·ªâ cu·ªëi v√† b·∫Øt ƒë·∫ßu t√¨m ki·∫øm t·ª´ 169.254.184.0 ƒë·∫øn 169.254.184.254
BASE_ADDR1 = '.'.join(MY_IP_ADDR.split('.')[:-1])
# V√≠ d·ª• ip l√† 169.254.184.0 th√¨ s·∫Ω lo·∫°i 2 ƒë·ªãa ch·ªâ cu·ªëi v√† b·∫Øt ƒë·∫ßu t√¨m ki·∫øm t·ª´ 169.254.0.0 ƒë·∫øn 169.254.254.254
# Ch·ªâ d√πng tr∆∞·ªùng h·ª£p n√†y khi c√≥ 2 camera m√† c√°ch ph√≠a tr√™n ch·ªâ t√¨m ƒë∆∞·ª£c 1 camera
BASE_ADDR2 = '.'.join(MY_IP_ADDR.split('.',2)[:-1])

RTSP_PORT = 554

SOCKET_TIMEOUT = 0.01

def check_rtsp(ip= None, ip_full = None):
    if ip:
        ipv4 = f'{BASE_ADDR2}.{ip[0]}.{ip[1]}'
    else:
        ipv4 = ip_full
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(SOCKET_TIMEOUT)
    exitcode = sock.connect_ex((ipv4, RTSP_PORT))
    sock.close()
    if not exitcode:
        print('üì∑ Found', ipv4)
        return ipv4, True
    return None, False
        
class Find_ip_camera(object):
    def __init__(self, window):
        
        self.window = tk.Tk()
        self.window.iconbitmap(".camera_app/image/app.ico")
        self.window.geometry("400x300")
        self.window.title("T√¨m ki·∫øm ip camera")
        self.object = window
        self.rtsp_ips = []
        self.sources =[]
        
        start_label = tk.Label(self.window, text="Ph·∫ßn m·ªÅm ch·ªâ d√≤ t√¨m ƒë∆∞·ª£c c√°c camera c√≥ chu·∫©n ONVIF")
        start_label.pack()
        start_label = tk.Label(self.window, text="ƒê·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi ·ªïn ƒë·ªãnh, ch·ªâ k·∫øt n·ªëi c√πng l√∫c t·ªëi ƒëa 6 camera")
        start_label.pack()
        start_label = tk.Label(self.window, text="Qu√° tr√¨nh t√¨m ki·∫øm ch∆∞a ƒë·∫øn 2 ph√∫t, vui l√≤ng ƒë·ª£i")
        start_label.pack()
        
        self.show_ip_text = tk.StringVar()
        self.get_ip_button = tk.Button(self.window, textvariable= self.show_ip_text, background= "tomato", cursor="hand2", command= lambda: self.find_ip(reload=True))
        self.show_ip_text.set(" Camera kh√¥ng c√≥ s·∫µn. ƒêang d√≤ ip ...")
        self.get_ip_button.pack()
        
        self.connect_camera = tk.Button(self.window, text= "K·∫øt n·ªëi v·ªõi c√°c camera t√¨m ƒë∆∞·ª£c", cursor="hand2", command = self.connect_ip_camera)
        self.end_label = tk.Label(self.window, text="Kh√¥ng t√¨m th·∫•y camera n√†o c·∫£, ki·ªÉm tra l·∫°i k·∫øt n·ªëi ethernet")
        
        get_license_in_thread = threading.Thread(target=self.find_rtsp_ips)
        get_license_in_thread.daemon = True
        get_license_in_thread.start()
        
        self.window.mainloop()

    def find_rtsp_ips(self):
        # L·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p t·ª´ file json
        # self.get_ip_button["state"] = "disable"
        try:
            with open(json_filename, 'r') as inside:
                self.data = json.load(inside)
                for i in range(1, 7):
                    ip_key = f'IP_cam{i}'
                    ip = self.data['camera'].get(ip_key)
                    if ip:
                        _, result = check_rtsp(ip_full=ip)
                        if result:
                            self.rtsp_ips.append(ip)
                if not self.rtsp_ips:
                    self.find_rtsp_ips_2(self.rtsp_ips)
                else:
                    self.show_ip_text.set("B·∫•m ƒë·ªÉ t√¨m ki·∫øm th√™m ip")
                    for ip in self.rtsp_ips:
                        self.show_result(ip)
                    self.connect_camera.pack()
        except Exception as e:
            print(f"L·ªói khi ƒë·ªçc t·ªáp JSON: {e}")
        
    def find_ip(self, reload = False):
        if reload:
            self.show_ip_text.set("ƒêang d√≤ ip ...")
            get_license_in_thread = threading.Thread(target=self.find_rtsp_ips_2, args=(self.rtsp_ips,))
            get_license_in_thread.start()
            
    def show_result(self, ip):
        ip_label = tk.Label(self.window, text=ip)
        ip_label.pack()
    
    def find_rtsp_ips_2(self,rtsp_ips):
        self.get_ip_button["state"] = "disable"
        self.connect_camera["state"] = "disable"
        print('üîé Scanning...')
        num_threads = 10
        with ThreadPoolExecutor(max_workers=num_threads) as executor:
            # T·∫°o danh s√°ch c√°c c·∫∑p (ip_index, ip)
            ip_combinations = product(range(0, 255), repeat=2)
            # Th·ª±c hi·ªán ki·ªÉm tra RTSP cho t·ª´ng c·∫∑p IP trong danh s√°ch b·∫±ng c√°ch s·ª≠ d·ª•ng executor map
            # results= executor.map(check_rtsp, ip_combinations) # Ch·ªâ tr·∫£ v·ªÅ 1 gi√° tr·ªã
            results = list(executor.map(check_rtsp, ip_combinations)) # Tr·∫£ v·ªÅ nhi·ªÅu gi√° tr·ªã
            i=1
            for ipv4, status in results:
                if status:
                    if i==7:
                        break
                    if ipv4 in rtsp_ips:
                        i+=1
                        continue
                    rtsp_ips.append(ipv4)
                    ip_key = f'IP_cam{i}'
                    self.data['camera'][ip_key] = ipv4
                    with open(json_filename, 'w') as outfile:
                        json.dump(self.data, outfile, indent=4)
        self.show_ip_text.set("C√°c camera c√≥ s·∫µn, b·∫•m ƒë·ªÉ t√¨m ki·∫øm l·∫°i")
        self.get_ip_button["state"] = "normal"
        self.connect_camera["state"] = "normal"
    
    def connect_ip_camera(self):
        for ip in self.rtsp_ips:
            print(ip)
            camera = Camera(ip= ip, user= "", password="")
            rtsp = camera.get_rtsp_stream()
            self.sources.append((ip, rtsp, camera))
            print(self.sources)
        # M·ªü ph·∫ßn m·ªÅm
        self.window.destroy()
        self.object(tk.Tk(), "D·ª©c Qu√¢n", self.sources)

    